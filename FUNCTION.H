#ifndef FUNCTION_H_INCLUDED
#define FUNCTION_H_INCLUDED
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include<string.h>
#include<ctype.h>
#include<conio.h>
#include <time.h>
#define L 256
#define N 40
#define M 20
#define K 15
#define nomFile "liste_livre.dat"
#define nomFile_1 "liste_livre_1.dat"
#define nomFile_2 "liste_inscription_eleve.dat"
#define nomFile_3 "liste_d'administration.bin"
#define nomFile_4 "liste_emprunter.txt"
#define nomFile_5 "liste_Noire.dat"

FILE* fp = NULL;
FILE* fp_1 = NULL;
FILE* fp_2 = NULL;
typedef struct user_blocklist
{
    char nom[M], prenom[M], CNE[K], CIN[K], email[N], adresse[N];
}user_blocklist;

user_blocklist *u2 = NULL;

char c, pass[N], line[L];
int choix, id, n, m;
long pos = 0.0 ;
void setBackgroundColor(int color) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO consoleInfo;
    WORD savedAttributes;

    // Obtenez les attributs actuels
    GetConsoleScreenBufferInfo(hConsole, &consoleInfo);
    savedAttributes = consoleInfo.wAttributes;

    // Appliquez la nouvelle couleur pour l'arrière-plan
    SetConsoleTextAttribute(hConsole, (savedAttributes & 0x0F) | (color << 4));
}
typedef struct user
{
    char nom[M], prenom[M], CNE[K], CIN[K], email[N], adresse[N], password[N];
}user;

user u;
user *u1 = NULL;

typedef struct info_livre
{
    float prix_jour, prix_semaine ;
    int ID , ans_publication , qte ;
    char titre[N] , auteur[M] , editeur[N] ;
}info_livre;

info_livre *tmp = NULL;

typedef struct info_livre_emprunter
{
    info_livre *livre;
    char email[N], adresse[N] , date_debut[K], date_fin[K] ;
}info_livre_emprunter;

info_livre_emprunter *temporaire = NULL;

int isTextOnly(char* str)
{
    if(*str == '\0') return 1;
    else if(!isalpha(*str) && !isspace(*str)) return 0;
    return isTextOnly(str + 1);
}


int isTextPrint(char* str)
{
    if(*str == '\0') return 1;
    else if(!isprint(*str)) return 0;
    return isTextPrint(str + 1);
}


void convertirEnMajuscules(char *chaine)
{
    if(*chaine == '\0') return;
    *chaine = toupper(*chaine);
    return convertirEnMajuscules(chaine + 1);
}


void masquer_mot_de_passe(char *password)
{
    n = 0;
    while ((c = getch()) != '\r')
    {
        if (c == '\b')
        {
            if (n > 0)
            {
                n--;
                printf("\b \b");
            }
        }
        else if (c != '\t' && c != '\n')
        {
            if (n < N - 1)
            {
                password[n] = c;
                n++;
                printf("*");
            }
        }
    }
    password[n] = '\0';
    printf("\n");
}
void gotoxy(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}


void setcolor(int color) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, color);
}
#define RESET   "\033[0m"
#define BOLD    "\033[1m"
#define YELLOW  "\033[33m"
#define GREEN   "\033[32m"
#define WHITE   "\033[37m"
#define RED "\033[31m"





void head()
{
    printf("████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████");
    gotoxy(50, 3);
    printf("-LA BIBLIOTHEQUE DE L'ECOLE NATIONALE DES SCIENCES APPLIQUEES AL HOCEIMA-\n\n");
    gotoxy(0,6);
    printf("████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████\n");
}/*
void sign_in1()
{
erreur_nom:
        head();
    fp = fopen(nomFile_2,"ab");
    if (fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_2);
        exit(0);
    }
    gotoxy(32, 10);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|L' I N S C R I P T I O N|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(64,13);
    printf("Enter votre nom          :");
    gotoxy(64,14);
    printf("Enter votre prenom       :");
    gotoxy(64,15);
    printf("Enter votre CIN          :");
    gotoxy(64,16);
    printf("Enter votre CNE          :");
    gotoxy(64,17);
    printf("Enter votre e-mail       :");
    gotoxy(64,18);
    printf("Enter adresse            :");
    gotoxy(64,19);
    printf("Enter votre mot de passe :");
    gotoxy(55,22);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(91,13);
    fflush(stdin);
    scanf("%[^\n]",u.nom);
    if(!isTextOnly(u.nom))
    {
        gotoxy(60,23);
        printf("\n\t!!! N.B : Seul de CARACTERE et ESPACE\nVoyez saisir un NOM valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,14);
    fflush(stdin);
    scanf("%[^\n]",u.prenom);
    if(!isTextOnly(u.prenom))
    {
        gotoxy(60,23);
        printf("\n\t!!! N.B : Seul de CARACTERE et ESPACE\nVoyez saisir un PRENOM valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,15);
    fflush(stdin);
    scanf("%s",u.CIN);
    if(!isTextPrint(u.CIN))
    {
        gotoxy(60,23);
        printf("\n\t!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE\nVoyez saisir une CIN valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,16);
    fflush(stdin);
    scanf("%s",u.CNE);
    if(!isTextPrint(u.CNE))
    {
        gotoxy(60,23);
        printf("\n\t!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE\nVoyez saisir une CNE valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,17);
    fflush(stdin); scanf("%s",u.email);
    gotoxy(91,18);
    fflush(stdin); scanf("%[^\n]",u.adresse); //fgets(u.adresse,sizeof(u.adresse),stdin);
    u.adresse[strcspn(u.adresse, "\n")] = '\0'; //A questionner ??
    gotoxy(91,19);
    fflush(stdin); scanf("%s",u.password);
    fprintf(fp,"%s|%s|%s|%s|%s|%s|%s\n",u.nom,u.prenom,u.CIN,u.CNE, u.email,u.adresse,u.password);
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_2);
    gotoxy(70,23);
    setcolor(10);
    setBackgroundColor(5);
    printf("VOUS ETES INSCRIT AVEC SUCCES!\n");
    gotoxy(65,26);
    setcolor(7);
    setBackgroundColor(5);
    printf("Voulez-vous aller à la page de connexion ? (O/N) : ");
erreur_alpha5:
    fflush(stdin);
    scanf(" %c", &c);
    if(toupper(c) != 'O' && toupper(c) != 'N')
    {
        gotoxy(65,27);
        printf("Voyez saisir une choix correcte (O/N) : ");
        goto erreur_alpha5;
    }
    else if(toupper(c) == 'O')
    {
        printf("\nRedirection vers la page de connexion...\n");
        Sleep(3000);
        system("cls");
        LOGIN1();
    }
    else erreur_page();
}
*/
void sign_in1()
{erreur_nom:
        head();
    fp = fopen(nomFile_2,"ab");
    if (fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_2);
        exit(0);
    }
    gotoxy(32, 10);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|L' I N S C R I P T I O N|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(64,13);
    printf("Enter votre nom          :");
    gotoxy(64,14);
    printf("Enter votre prenom       :");
    gotoxy(64,15);
    printf("Enter votre CIN          :");
    gotoxy(64,16);
    printf("Enter votre CNE          :");
    gotoxy(64,17);
    printf("Enter votre e-mail       :");
    gotoxy(64,18);
    printf("Enter adresse            :");
    gotoxy(64,19);
    printf("Enter votre mot de passe :");
    gotoxy(55,22);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(91,13);
    fflush(stdin);
    scanf("%[^\n]",u.nom);
    if(!isTextOnly(u.nom))
    {
        gotoxy(60,23);
        printf("!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE");
        gotoxy(67,24);
        printf("Veuillez saisir une CNE valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,14);
    fflush(stdin);
    scanf("%[^\n]",u.prenom);
    if(!isTextOnly(u.prenom))
    {
        gotoxy(60,23);
        printf("!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE");
        gotoxy(67,24);
        printf("Veuillez saisir une CNE valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,15);
    fflush(stdin);
    scanf("%s",u.CIN);
    if(!isTextPrint(u.CIN))
    {
        gotoxy(60,23);
        printf("!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE");
        gotoxy(67,24);
        printf("Veuillez saisir une CNE valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,16);
    fflush(stdin);
    scanf("%s",u.CNE);
    if(!isTextPrint(u.CNE))
    {
        gotoxy(60,23);
        printf("!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE");
        gotoxy(67,24);
        printf("Veuillez saisir une CNE valide");
        Sleep(2000);
        system("cls");
        goto erreur_nom;
    }
    gotoxy(91,17);
    fflush(stdin); scanf("%s",u.email);
    gotoxy(91,18);
    fflush(stdin);scanf("%[^\n]",u.adresse);
    u.adresse[strcspn(u.adresse, "\n")] = '\0'; //A questionner ??
    gotoxy(91,19);
    fflush(stdin); scanf("%s",u.password);
    fp_1 = fopen(nomFile_5 , "r+t");
    if(fp_1 == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_5);
        exit(1);
    }
    m = 0;
    while (fgets(line, sizeof(line), fp_1))
    {
        if(strstr(line , (u.CIN)) && strstr(line , (u.CNE)))
        {
            m = 1;
            break;
        }
    }
    n = fclose(fp_1);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
    if(!m)
    {
        fprintf(fp,"%s|%s|%s|%s|%s|%s|%s\n",u.nom,u.prenom,u.CIN,u.CNE,u.email,u.adresse,u.password);

        gotoxy(70,23);
        setcolor(10);
        setBackgroundColor(5);
        printf("VOUS ETES INSCRIT AVEC SUCCES!\n");


        gotoxy(62,26);
        printf("Voulez-vous aller à la page de connexion ? (O/N) : ");
erreur_alpha5:
        fflush(stdin);
        scanf(" %c", &c);
        if(toupper(c) != 'O' && toupper(c) != 'N')
        {
            gotoxy(65,27);
            printf("Voyez saisir une choix correcte (O/N) : ");
            goto erreur_alpha5;
        }
        else if(toupper(c) == 'O')
        {
            printf("\nRedirection vers la page de connexion...\n");
            Sleep(3000);
            system("cls");
            LOGIN1();
        }
        else erreur_page();

    }
    else {
            setcolor(12);
            setBackgroundColor(5);
    gotoxy(55,24);
            printf("%s %s , Votre compte est blocké !!!", (u.nom) , (u.prenom));
    gotoxy(55,25);
    printf("Consulter avec l'administrateur pour régler vos problèmes.");
        gotoxy(55,26);
    printf("appuyez sur une touche pour continuer");
            n = fclose(fp);
                getch();
    homepage();
if (n != 0) {
    perror("Erreur lors de la fermeture du fichier");
    exit(1);
    }
    }
}




void LOGIN1()
{   system("color 57");
    char email[N];
    fp = fopen(nomFile_2, "rt");
    if (fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_2);
        exit(1);
    }
    head();
    u1 = (user *)malloc(sizeof(user));
    gotoxy(50, 12);
    printf("━━━━━━━━━━━━━━━━━━━━━|LOGIN TO YOUR ACCOUNT|━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(62,21);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(65, 15);
    printf("Email       :");
    gotoxy(65, 18);
    printf("Mot de passe: ");
    gotoxy(65 + strlen("Email       :"), 15);
    scanf("%s", email);
    gotoxy(65 + strlen("Mot de passe: "), 18);
    masquer_mot_de_passe(pass);
    m = 0;
    while (fscanf(fp, "%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|%s\n", &(u1->nom), &(u1->prenom), &(u1->CIN), &(u1->CNE), &(u1->email), &(u1->adresse), &(u1->password)) == 7)
    {
        if (!strcmp(u1->email, email) && !strcmp(u1->password, pass))
        {
            m = 1;
            break;
        }
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_2);
    gotoxy(59,23);
    if(!m)
    {
        gotoxy(68, 23);
        setcolor(12);
        setBackgroundColor(5);
        puts("CIN ou Mot de passe incorrect");
        gotoxy(65, 25);
        printf("Appuyez sur une touche pour continuer...");
        getch();
        system("cls");
        LOGIN1();
    }
    setcolor(10);
    setBackgroundColor(5);
    printf("Connexion réussie ! Bienvenue %s %s.\n", u1->nom, u1->prenom);
    Sleep(2500);
    system("cls");
    espace_etudiant();
}

void LOGIN2()
{   system("color 57");
    char password[N];
    head();
    fp = fopen(nomFile_3,"rb");
    if (fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_3);
        return;
    }
    gotoxy(50, 12);
    printf("━━━━━━━━━━━━━━━━━━━━━|LOGIN TO YOUR ACCOUNT|━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(66,20);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(66, 16);
    printf("Password:");
    gotoxy(66+strlen("Password: "),16);
    masquer_mot_de_passe(password);
    m = 0;
    fflush(stdin);
    while(fscanf(fp,"%s",pass)==1)
    {
        if(!strcmp(password,pass))
        {
            m = 1;
            break;
        }
        fflush(stdin);
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_3);
    gotoxy(74,22);
    if(!m)
    {
       setcolor(4);
       setBackgroundColor(5);
        gotoxy(71, 24);
        puts("CIN ou Mot de passe incorrect\n");
        Sleep(2500);
        system("cls");
        LOGIN2();
    }
    setcolor(10);
    setBackgroundColor(5);
    printf("Connexion réussie!\n");
    Sleep(2500);
    system("cls");
    espace_administration();
    exit(0);
}


void erreur_page(){
    system("cls");
    system("color F9");
    gotoxy(65, 12);
    printf("********************************************");
    gotoxy(71, 14);
    printf("Consulter cette page ulterieurement !!");
    gotoxy(87, 16);
    printf("MERCI...");
    gotoxy(65, 18);
    printf("********************************************");
    gotoxy(0,27);
    setcolor(07);
    Sleep(2500);
    exit(0);
    system("PAUSE");
}


void login_sign_in1()
{   system("cls");
head();
    gotoxy(26,11);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|E S P A C E   D' E T U D I A N T|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    while(1)
    {
        n = 0;
    gotoxy(59, 14);
    printf("1. se connecter          ");
     gotoxy(90, 14);
    printf("2. s'inscrire            ");
     gotoxy(78, 17);
    printf("3. Exit                  ");
        gotoxy(55, 20);
        printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
        gotoxy(65, 24);
        printf("Please select a valid option (1-3): ");
        gotoxy(100, 24);
tarik:
        fflush(stdin); scanf("%d", &n);
        // Read user input
        switch (n)
        {
            case 1:
               system("cls");
               LOGIN1();
               return;
            case 2:
                system("cls");
                sign_in1();
                return ;
            case 3:
                system("cls");
                homepage();
           default:
                    gotoxy(52, 24);
                    printf("Entree invalide!!! Veuillez selectionner une option valide (1-3): ");
                    gotoxy(118, 24);
                    goto tarik;

        }
    }
}


void login_sign_in2()
{   system("cls");
    system("color 57");
    head();
    gotoxy(26,11);
    printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|E S P A C E   D' A D M I N I S T R A T I O N|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    while(1)
    {
        n = 0;
        gotoxy(65, 15);
        printf("1. Connexion                   ");
        gotoxy(95, 15);
        printf("2. Quitter                     ");
        gotoxy(52, 19);
        printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
        gotoxy(60, 23);
        printf("Veuillez selectionner une option valide (1-3): ");
        gotoxy(60+strlen("Veuillez selectionner une option valide (1-3): "), 23);
tarik:
        fflush(stdin); scanf("%d", &n);
        switch (n)
        {
            case 1:
               system("cls");
               LOGIN2();
               return;
            case 2:
                system("cls");
                homepage();
           default:
                    gotoxy(52, 25);
                    printf("Entree invalide!!! Veuillez selectionner une option valide (1-3): ");
                    goto tarik;
        }
    }
}

void homepage() {
    system("cls");
    head();
   system("color 57");

           int n;
gotoxy(30,9);
printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|M E N U  P R I N C I P A L|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
gotoxy(18,13);
printf("                              veuillez choisir l'espace que vous voulez souhaiter faire des operations :");

gotoxy(50,17);
printf("1-espace d'etudiants:                          2-espace administration :");
gotoxy(35,20);
printf("                                            3-QUITTER : \n\n\n");
gotoxy(45,22);
printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
gotoxy(130,39);
printf("© 2024 ENSAH LIBARY. All rights reserved.");
gotoxy(72,25);
printf("Veuillez entrer votre choix : ");
gotoxy(72+strlen("Veuillez entrer votre choix :"),25);
fflush(stdin);
scanf("%d", &n);
tarik:
switch (n) {

            case 1:
               system("cls");
              afficherEtAccepterTermesConditions();
               return;
            case 2:
               system("cls");
              login_sign_in2();
               return;
            case 3:
                erreur_page();

                exit(0);
           default:

                    gotoxy(63, 25);
                    printf("Invalid input.Please select a valid option (1-3): ");
                    gotoxy(112, 25);
                    scanf("%d",&n);
                    goto tarik;

    }
}

void afficher_livre(const char *nom)
{
    if(pos == 1.0)
    {
        fp = fopen(nom , "r+t");
        if (fp == NULL)
        {
            printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nom);
            return;
        }
        tmp = (info_livre*) malloc (sizeof(info_livre));
        while(!feof(fp))
        {
            fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
            if(id == (tmp->ID)) break;
        }
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nom);
        afficher_informations1(*tmp);
    }
    else if(pos == -1.0) puts("Aucun livre correspond avec vos informations !!");
    else puts("\nDésole!!! Actuellement, Il n'y a pas de livre en stock!!!\n\tVoyez revenir ulterierement\n\tMERCI POUR VOTRE COMPREHENSION.");
}


void afficher_informations1(info_livre tmp)
{
    printf("\n============== Details du Livre ==============\n");
    printf("ID               : %d\n", tmp.ID);
    printf("Titre            : %s\n", tmp.titre);
    printf("Acteur           : %s\n", tmp.auteur);
    printf("Editeur          : %s\n", tmp.editeur);
    printf("Année            : %d\n", tmp.ans_publication);
    printf("Prix par jour    : %.2f\n", tmp.prix_jour);
    printf("Prix par semaine : %.2f\n", tmp.prix_semaine);
    printf("================================================\n");
}


void affiche_livre(const char *fichier_source)
{
    recherche_livre();
    if(pos == -2.0) puts("Désole!!! Actuellement, Il n'y a pas de livre dans la bibliothéque !!!\n\tMerci de revenir ulterierement.");
    else
    {
        n = 0;
        tmp = (info_livre*) malloc (sizeof(info_livre));
        system("cls");
        gotoxy(25,12);
        printf("__________________________________________________________________________________________________________________________________");
        gotoxy(25,13);
        printf("| ID         |    Titre               |    Auteur            | Éditeur            |  Année  | Prix/Jour | Prix Aprés une Semaine |");
        gotoxy(25,14);
        printf("__________________________________________________________________________________________________________________________________");
        fp = fopen(fichier_source, "r+t");
        if (fp == NULL)
        {
            printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", fichier_source);
            return;
        }
        while (fscanf(fp, "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine)) == 8)
        {
            gotoxy(25, 15 + n);
            printf("| %-10d | %-22s | %-20s | %-18s | %-7d | %-9.2f | %-22.2f |\n", (tmp->ID), (tmp->titre), (tmp->auteur), (tmp->editeur), (tmp->ans_publication), (tmp->prix_jour), (tmp->prix_semaine));
            n++;
        }
        gotoxy(25, 15 + n);
        printf("__________________________________________________________________________________________________________________________________\n");
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", fichier_source);
    }
}


void retourner_livre()
{
    m = 0; // Flag pour indiquer si le livre est trouvé
    char nom[100]; // Titre du livre à retourner
    // Ouverture des fichiers
    fp = fopen(nomFile, "r+t");
    fp_1 = fopen(nomFile_1, "w+t");
    if(fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
        exit(1);
    }
    if(fp_1 == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_1);
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
        exit(1);
    }
    printf("Entrez le titre du livre : ");
    fflush(stdin);
    fgets(nom, sizeof(nom), stdin); // Lire la ligne entière avec les espaces
    nom[strcspn(nom, "\n")] = '\0'; // Retirer le saut de ligne si présent
    info_livre *livre = (info_livre*) malloc (sizeof(info_livre));
    // Lecture ligne par ligne du fichier source
    while (fscanf(fp, "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n", &(livre->ID), &(livre->titre), &(livre->auteur), &(livre->editeur), &(livre->ans_publication), &(livre->qte), &(livre->prix_jour), &(livre->prix_semaine)) == 8)
    {

        if (strcmp(livre->titre, nom) == 0)
        {                                    // Si le livre est trouvé
            livre->qte += 1;             // Incrémenter la quantité
            m = 1;                       // Marquer comme trouvé
        }
        // Écrire le livre (modifié ou non) dans le fichier temporaire
        fprintf(fp_1, "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n", (livre->ID), (livre->titre), (livre->auteur), (livre->editeur), (livre->ans_publication), (livre->qte), (livre->prix_jour), (livre->prix_semaine));
    }
    // Fermeture des fichiers
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
    n = fclose(fp_1);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_1);
    // Vérification si le livre a été trouvé
    if (m)
    {
        remove(nomFile);            // Supprime le fichier source
        rename(nomFile_1, nomFile); // Renomme le fichier temporaire
        printf("Le livre a été retourné avec succès.\n");
    }
    else
    {
        remove(nomFile_1);          // Supprime le fichier temporaire
        printf("Erreur : Le livre n'existe pas.\n");
    }
}


void afficher_menu_etu()
{
        gotoxy(60,12);
    puts("━━━━━━━━━━━━━━━━━━ESPACE ETUDIANTS━━━━━━━━━━━━━━━━━");
    gotoxy(60, 14);
    printf("*\t1           Emprunter un livre               *");
    gotoxy(60, 16);
    printf("---------------------------------------------------");
    gotoxy(60, 18);
    printf("*\t2           Rechercher un livre              *");
    gotoxy(60, 20);
    printf("---------------------------------------------------");
    gotoxy(60, 22);
    printf("*\t3       Lister les livres disponibles        *");
    gotoxy(60, 24);
    printf("---------------------------------------------------");
    gotoxy(60, 26);
    printf("*\t0                 Exit                        *");
    gotoxy(60, 28);
    puts("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(64, 30);
    printf("Veuillez entrer une meilleure choix (0-3)");
    gotoxy(64+strlen("Veuillez entrer une meilleure choix (0-3): "),30);
    scanf("%d", &choix);
}


void espace_etudiant()
{    system("color 57");
    head();
    convertirEnMajuscules(u1->nom);
    convertirEnMajuscules(u1->prenom);
    gotoxy(73,9);
    printf("BIENVENUE %s %s ", u1->nom, u1->prenom);
    Is_Fichier_Livre(nomFile);
    Is_Fichier_Livre(nomFile_2);
    Is_Fichier_Livre(nomFile_4);
    Is_Fichier_Livre(nomFile_5);
    afficher_menu_etu();
    do
    {
    switch(choix)
    {
        case 0 :
            system("cls");
            homepage();
            break;
        case 1 :
            emprunter_livre();
            break;
        case 2 :
            recherche_livre();
            if(pos == -2.0) puts("\nDésole!!! Actuellement, Il n'y a pas de livre !!!\n\tVoyez revenir ulterierement\n\tMERCI POUR VOTRE COMPREHENSION.");
            else
            {
                espace_recherche_livre();
                afficher_livre(nomFile);
            }
            break;
        case 3 :
            affiche_livre(nomFile);
            break;
        default :
            setcolor(4);
            gotoxy(64,32);
            puts("Erreur!!! entrer un nombre valide entre (0-3):");
            Sleep(2000);
            break;
    }
    gotoxy(69,33);
    puts("Appuyez sur une touche pour continuer...");
    getch();
    system("cls");

    if(choix) espace_etudiant();
    }while(choix != 0);
    getch();
}


void afficher_menu_admini()
{
        gotoxy(35,11);
    puts("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━│ESPACE ADMINISTRATION│━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(50,15);
    printf("1-Ajouter un livre");
    gotoxy(107,15);
    printf("2-Supprimer un livre                        ");
    gotoxy(50,19);
    printf("3-Modifier les informations d\'un livre    ");
    gotoxy(107,19);
    printf("4-Retourner un livre                      ");
    gotoxy(50,23);
    printf("5-Statistique");
    gotoxy(107,23);
    printf("6-Recherche un livre");
    gotoxy(50,27);
    printf("7-Lister les livres empruntes");
    gotoxy(107,27);
    printf("8-Liste_Noire");
    gotoxy(85,31);
    printf("0-Exit");
    gotoxy(35,35);
    puts("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(68,37);
    printf("Veuillez entrer une meilleur choix (0-8): ");
    scanf("%d", &choix);
}


void espace_administration()
{   system("color 57");
    system("cls");
    head();
    Is_Fichier_Livre(nomFile);
    Is_Fichier_Livre(nomFile_2);
    Is_Fichier_Livre(nomFile_4);
    Is_Fichier_Livre(nomFile_5);
    afficher_menu_admini();
    do
    {
    switch(choix)
    {
        case 0 :
            system("cls");
            homepage();
            break;
        case 1 :
            ajouter_livre();
            break;

        case 2 :
            supprimer_livre();
            break;
        case 3 :
            modifier_livre();
            break;
        case 4 :
            retourner_livre();
            break;
        case 5 :
            recherche_livre();
            if(pos != -2.0) statistique();
            else puts("\nLa liste des livres est vide !!!");
            break;
        case 6 :
            recherche_livre();
            if(pos == -2.0) puts("\nLa liste est vide !!!");
            else
            {
                espace_recherche_livre();
                afficher_fpos();
            }
            break;
        case 7 :
            liste_livre_emprunter();
            break;
        case 8 :
            blocklist();
            break;
        default :
            setcolor(4);
            setBackgroundColor(5);
            gotoxy(67,38);
            puts("Erreur!!! entrer un nombre valide entre (0-8)");
            gotoxy(69,39);
            puts("Appuyez sur une touche pour continuer...");
            getch();
            break;
    }
    getch();
    system("cls");

    if(choix) espace_administration();
    }while(choix != 0);

    getch();
}
void emprunter_livre()
{
    recherche_livre();
    if(pos != -2.0)
    {
        // Demander l'ID a l'utilisateur
        printf("Entrez l'ID du livre : ");
erreur_num:
        fflush(stdin);
        n = scanf("%d", &id);
        if((n != 1) || (id <= 0))
        {
            printf("Voyez saisir une valeur correcte (>0) : ");
            goto erreur_num;
        }
        temporaire = (info_livre_emprunter*) malloc (sizeof(info_livre_emprunter));
        // Charger le livre correspondant a l'ID
        recherche_livre();
        if (pos == 1.0)
        {
            if(!(tmp->qte))
            {
                puts("Nous sommes désolés, mais nous n'avons pas ce livre en stock pour le moment\n");
                return;
            }
            strcpy((temporaire->email) , (u1->email));
            strcpy((temporaire->adresse) , (u1->adresse));
            temporaire->livre = tmp ;
            puts("Combien de jours voulez-vous d'emprunt ? (N.B  Ne dépasse pas 2 mois) :");
erreur_num1:
            fflush(stdin);
            m = scanf("%d", &n);
            if((m != 1) || (n <= 0) || (n > 60) )
            {
                printf("Voyez saisir une valeur correcte (0<Jours<60) : ");
                goto erreur_num1;
            }
            // Calculer le cout
            float total = (n < 7) ? tmp->prix_jour * n : tmp->prix_semaine;
            if(n == 1) printf("Le coût total d'un seul jour est : %.2fDH\n", total);
            else printf("Le coût total des %d jours est : %.2fDH\n", n, total);
            printf("Voulez-vous suiver cette processus (O/N) : ");
erreur_alpha4:
            fflush(stdin);
            scanf(" %c", &c);
            if(toupper(c) != 'O' && toupper(c) != 'N')
            {
                printf("Voyez saisir une choix correcte (O/N) : ");
                goto erreur_alpha4;
            }
            else if(toupper(c) == 'O')
            {
                int jour = 0, mois = 0, annee = 0;
                while(((jour > 31) || (jour < 1)) || ((mois > 12) || (mois < 1)) || (annee < 1900))
                {
                    printf("Donnez la date de livraison du livre (jj / mm / aaaa) (N.B : la date doit également >= 2jours) : ");
erreur_date:
                    scanf("%d\t %d\t %d", &jour, &mois, &annee);
                }
                time_t now = time(NULL);
                struct tm *cur_time = localtime(&now);
                if((((cur_time->tm_mday) - jour < -1) && !((cur_time->tm_mon) - mois + 1) && !((cur_time->tm_year) - annee + 1900)) || ((cur_time->tm_year) - annee + 1900 < 0) || (((cur_time->tm_mon) - mois + 1 > 0) && ((cur_time->tm_year) - annee + 1900 < 0)))
                {
                    cur_time->tm_year = annee - 1900;
                    cur_time->tm_mon = mois - 1;
                    cur_time->tm_mday = jour;
                }
                else
                {
                    printf("Voyey entrer une date convenable (Date >= 2jours) : ");
                    goto erreur_date;
                }
                char *s1 = (char*) malloc (K * sizeof(char));
                strftime(s1 , K , "%H:%M" , cur_time);
                char *s2 = (char*) malloc (M * sizeof(char));
                strftime(s2 , M , "%Z" , cur_time);
                strftime((temporaire->date_debut) , K , "%d %m %Y" , cur_time);
                struct tm *cur_time1 = localtime(&now);
                cur_time1->tm_year = annee - 1900;
                cur_time1->tm_mon = mois - 1;
                cur_time1->tm_mday = jour + n;
                while(1)
                {
                    if((!(cur_time1->tm_mon) || (cur_time1->tm_mon == 2) || (cur_time1->tm_mon == 4) || (cur_time1->tm_mon == 6) || (cur_time1->tm_mon == 7) || (cur_time1->tm_mon == 9) || (cur_time1->tm_mon == 11)) && (cur_time1->tm_mday > 31))
                    {
                        cur_time1->tm_mday -= 31;
                        cur_time1->tm_mon += 1;
                    }
                    else if(((cur_time1->tm_mon == 3) || (cur_time1->tm_mon == 5) || (cur_time1->tm_mon == 8) || (cur_time1->tm_mon == 10)) && (cur_time1->tm_mday > 30))
                    {
                        cur_time1->tm_mday -= 30;
                        cur_time1->tm_mon += 1;
                    }
                    else
                    {
                        if((cur_time1->tm_mday > 29) && !((cur_time1->tm_year + 1900) % 4) && ((cur_time1->tm_mon) == 1)) cur_time1->tm_mday -= 29;
                        else if((cur_time1->tm_mday > 28) && ((cur_time1->tm_year + 1900) % 4) && ((cur_time1->tm_mon) == 1)) cur_time1->tm_mday -= 28;
                        else break;
                        cur_time1->tm_mon += 1;
                    }
                    if(cur_time1->tm_mon > 11)
                    {
                        cur_time1->tm_mon -= 12;
                        cur_time1->tm_year += 1;
                    }
                }
                strftime((temporaire->date_fin) , K , "%d %m %Y" , cur_time1);
                n = 0;
                copier_livres(nomFile , nomFile_1);
                fp = fopen(nomFile_4,"a+t");
                if(fp==NULL)
                {
                    printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_4);
                    return;
                }
                fprintf(fp , " %-6d %-28s %-20s %-22s %-7d %-15s %-22s %-7s   %-7s\n" , (temporaire->livre->ID) , (temporaire->livre->titre) , (temporaire->livre->auteur) , (temporaire->livre->editeur) , (temporaire->livre->ans_publication) , (temporaire->email), (temporaire->adresse), (temporaire->date_debut), (temporaire->date_fin));
                n = fclose(fp);
                if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_4);
                puts("Votre emprunte a été effectué sans erreur!!");
                Sleep(2000);
                printf("Vous recevez la livraison le jour : %s a %s (%s) , Jusqu'au : %s à %s (%s) sous l'adresse : %s .\n", temporaire->date_debut, s1, s2, temporaire->date_fin, s1, s2, temporaire->adresse);
                printf("vous devez payer livreur");
            }
        }
        else printf("Aucun livre trouvé avec l'ID %d.\n", id);
    }
    else puts("\nDésole!!! Actuellement, Il n'y a pas de livre pour emprunter !!!\n\tVoyez revenir ulterierement\n\tMERCI POUR VOTRE COMPREHENSION.");
}
void liste_livre_emprunter()
{   int i=0;
    system("cls");
    fp = fopen(nomFile_4,"r+t");
    if(fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_4);
        return ;
    }gotoxy(10,12);
    printf("--------------------------------------------------------------------------------------------------------------------------------------------------------");
    gotoxy(10,13);
    printf("|  ID  |            Titre           |        Acteur      |        Editeur       | Année |     Email    |        Adresse       |  DateDébut |  DateFin  |");
    gotoxy(10,14);
    printf("--------------------------------------------------------------------------------------------------------------------------------------------------------");
    while (!feof(fp))
    {
        fgets(line, sizeof(line), fp);
        gotoxy(10,15+i);
        printf("%s\n", line);
        i++;
    }
     gotoxy(10,14+i);
    printf("--------------------------------------------------------------------------------------------------------------------------------------------------------");


    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_4);
}


void copier_livres(const char *fichier_source, const char *fichier_destination)
{
    fp = fopen(fichier_source, "r+t");
    fp_1 = fopen(fichier_destination, "w+t");
    // Verification de l'ouverture des fichiers
    if (fp == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", fichier_source);
        return;
    }
    if (fp_1 == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", fichier_destination);
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", fichier_source); // Fermer le fichier source avant de quitter
        return;
    }
    tmp = (info_livre*) malloc (sizeof(info_livre));
    while (fscanf(fp, "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n", &(tmp->ID), (tmp->titre), (tmp->auteur), (tmp->editeur), &(tmp->ans_publication), &(tmp->qte), &(tmp->prix_jour), &(tmp->prix_semaine)) == 8)
    {
        if((tmp->ID) != id) fprintf(fp_1, "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n", (tmp->ID), (tmp->titre), (tmp->auteur), (tmp->editeur), (tmp->ans_publication), (tmp->qte), (tmp->prix_jour), (tmp->prix_semaine));
        else if(!n) fprintf(fp_1, "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n", (tmp->ID), (tmp->titre), (tmp->auteur), (tmp->editeur), (tmp->ans_publication), ((tmp->qte) - 1), (tmp->prix_jour), (tmp->prix_semaine));
        else fprintf(fp_1, "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n", (tmp->ID), (tmp->titre), (tmp->auteur), (tmp->editeur), (tmp->ans_publication), ((tmp->qte) + 1), (tmp->prix_jour), (tmp->prix_semaine));
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", fichier_source);
    n = fclose(fp_1);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", fichier_destination);
    remove(fichier_source);
    rename(fichier_destination , fichier_source);
}

/*
void statistique()
{
    int maxi = 0, mini = 0;
    float maxi1 = 0.0, mini1 = 0.0;
    int *tab_id_qte, *tab_id_ans, *tab_id_prix;
    tab_id_qte = (int*) malloc (L * sizeof(int));
    tab_id_ans = (int*) malloc (L * sizeof(int));
    tab_id_prix = (int*) malloc (L * sizeof(int));
    tmp = (info_livre*) malloc (sizeof(info_livre));
    fp = fopen(nomFile, "r+t");
    fp_1 = fopen(nomFile_4, "r+t");
    if (fp == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
        return;
    }
    if (fp_1 == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_4); // Fermer le fichier source avant de quitter
        return;
    }
    printf("ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ Statistique ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»\n");
    printf("º   Les livre(s) (a/ont) plus grand quantité (sont/est):           º\n");
    while(!feof(fp))
    {
        fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
        if(maxi <= (tmp->qte))
        {
            maxi = (tmp->qte);
        }
        if(mini >= (tmp->qte)) mini = (tmp->qte);

        if(maxi <= (tmp->ans_publication)) maxi = (tmp->ans_publication);

        if(mini >= (tmp->ans_publication)) mini = (tmp->ans_publication);

        if(maxi1 <= (tmp->prix_semaine)) maxi1 = (tmp->prix_semaine);

        if(mini1 >= (tmp->prix_semaine)) mini1 = (tmp->prix_semaine);

    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
    n = fclose(fp_1);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_4);


}
*/


void espace_recherche_livre()
{
    printf("Donner ID de livre : ");
erreur_num2:
    fflush(stdin);
    n = scanf("%d", &id);
    if((n != 1) || (id <= 0))
    {
        printf("Voyez saisir une valeur correcte (>0) : ");
        goto erreur_num2;
    }
    recherche_livre();
    if(pos == 1.0) puts("Les informations du livre sont comme suit : ");
}


void Is_Fichier_Livre(const char *nom)
{
    fp = fopen(nom , "r+t");
    if(fp == NULL)
    {
        fp = fopen(nom , "w+t");
        if(fp == NULL)
        {
            printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nom);
            exit(1);
        }
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nom);
}


void afficher_informations(info_livre b)
{
    printf("ID du livre\t\t\t\t\t\t\t: %d \n",b.ID);
    printf("Le titre du livre\t\t\t\t\t\t: %s \n",b.titre) ;
    printf("Nom d'acteur du livre\t\t\t\t\t        : %s \n",b.auteur) ;
    printf("L'ans du publication du livre\t\t\t\t        : %d \n",b.ans_publication) ;
    printf("L'editeur du livre \t\t\t\t\t\t: %s \n",b.editeur) ;
    printf("La quantite du livres en stock     \t\t\t\t: %d \n",b.qte) ;
    printf("Le prix de livre pour emprunter par jour (en MAD)  \t\t: %.2f \n",b.prix_jour) ;
    printf("Le prix de livre pour emprunter de plus une semaine (en MAD)    : %.2f \n",b.prix_semaine) ;
}


void saiser_informations(info_livre **b)
{
    if(!id)
    {
        printf("Entrer id du livre : ") ;
erreur_num3:
        fflush(stdin);
        n = scanf("%d",&((*b)->ID));
        if((n != 1) || (((*b)->ID) <= 0))
        {
            printf("Voyez saisir une valeur correcte (>0) : ");
            goto erreur_num3;
        }
    }
    printf("Entrer le titre du livre : ") ;
erreur_print3:
    fflush(stdin);
    scanf("%[^\n]",&((*b)->titre)) ;
    if(!isTextPrint((*b)->titre))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE\nVoyez saisir un titre valide : ");
        goto erreur_print3;
    }
    printf("Entrer nom d'acteur du livre : ") ;
erreur_nom3:
    fflush(stdin);
    scanf("%[^\n]",&((*b)->auteur)) ;
    if(!isTextOnly((*b)->auteur))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE et ESPACE\nVoyez saisir un nom valide : ");
        goto erreur_nom3;
    }
    printf("Entrer l'ans du publication du livre : ") ;
erreur_num4:
    fflush(stdin);
    n = scanf("%d",&((*b)->ans_publication)) ;
    if((n != 1) || (((*b)->ans_publication) <= 0))
    {
        printf("Voyez saisir une annee correcte (>0) : ");
        goto erreur_num4;
    }
    printf("Entrer l'editeur du livre : ") ;
erreur_print4:
    fflush(stdin);
    scanf("%[^\n]",&((*b)->editeur)) ;
    if(!isTextPrint((*b)->editeur))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE\nVoyez saisir un editeur valide : ");
        goto erreur_print4;
    }
    printf("Entrer la quantite du livres en stock : ") ;
erreur_num5:
    fflush(stdin);
    n = scanf("%d",&((*b)->qte)) ;
    if((n != 1) || (((*b)->qte) <= 0))
    {
        printf("Voyez saisir une valeur correcte (>0) : ");
        goto erreur_num5;
    }
    printf("Entrer le prix de livre pour emprunter par jour (en MAD) : ") ;
erreur_flo:
    fflush(stdin);
    n = scanf("%f",&((*b)->prix_jour)) ;
    if((n != 1) || (((*b)->prix_jour) < 0))
    {
        printf("Voyez saisir un prix correct (>0) : ");
        goto erreur_flo;
    }
    printf("Entrer le prix de livre pour emprunter de plus une semaine (en MAD)  : ") ;
erreur_flo1:
    fflush(stdin);
    n = scanf("%f",&((*b)->prix_semaine)) ;
    if((n != 1) || (((*b)->prix_semaine) < 0))
    {
        printf("Voyez saisir un prix correct (>0) : ");
        goto erreur_flo1;
    }
}


void ajouter_livre()
{
        // ajout des livres :
        puts("Entrer les informations sur livre : \n");
        printf("Entrer id du livre : ") ;
erreur_num6:
        fflush(stdin);
        n = scanf("%d",&id);
        if((n != 1) || (id <= 0))
        {
            printf("Voyez saisir une valeur correcte (>0): ");
            goto erreur_num6;
        }

        recherche_livre();
        if(pos == 1.0) printf("\nERREUR!!! VOYEZ ENTRER UN AUTRE ID!!! Cette ID est deja remplie.\n");
        else
        {
            info_livre *debut = (info_livre*)malloc(sizeof(info_livre));
            debut->ID = id;
            saiser_informations(&debut);
            info_livre_equ(debut);
            if(pos == 1.0)
            {
                puts("\n\nS'il vous plait !!!\nVeuillez entrer un autre livre cette livre deja existe\nSes informations sont representent comme suit :\n");
                afficher_fpos();
            }
            else
            {
                fp = fopen(nomFile , "a+t");
                if(fp == NULL)
                {
                    printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
                    exit(1);
                }
                fprintf(fp , "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n" , (debut->ID) , (debut->titre) , (debut->auteur) , (debut->editeur) , (debut->ans_publication) , (debut->qte) , (debut->prix_jour) , (debut->prix_semaine));
                puts("\nL'enregesretement des informations s'effectue avec succee") ;

                n = fclose(fp);
                if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
            }

        }
        printf("Voulez-vous ajouter une autre livre (O/N) ? ");
erreur_alpha:
        fflush(stdin);
        scanf(" %c", &c);
        if(toupper(c) != 'O' && toupper(c) != 'N')
        {
            printf("Voyez saisir une choix correcte (O/N) : ");
            goto erreur_alpha;
        }
        else if(toupper(c) == 'O') ajouter_livre();
}


void afficher_fpos()
{

    if(pos == 1.0)
    {
        fp = fopen(nomFile , "r+t");
        if(fp == NULL)
        {
            printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
            exit(1);
        }
        tmp = (info_livre*)malloc(sizeof(info_livre));
        while(!feof(fp))
        {
            fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n", &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
            if(id == tmp->ID) break;
        }
        afficher_informations(*tmp);
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
    }
    else if(pos == -1.0) printf("Ce livre n'existe pas !!! \n");
    else printf("\nLa liste est vide !!!\n");

}


void info_livre_equ(info_livre *debut)
{
    tmp = (info_livre*)malloc(sizeof(info_livre));
    fp = fopen(nomFile , "r+t");
    if(fp == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
        exit(1);
    }
    n = 0;
    while(!feof(fp))
    {
        n++;
        m = fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
        if(!stricmp(debut->titre , tmp->titre) && !stricmp(debut->auteur , tmp->auteur) && !stricmp(debut->editeur , tmp->editeur) && (debut->ans_publication == tmp->ans_publication)) break;
    }
    if(!stricmp(debut->titre , tmp->titre) && !stricmp(debut->auteur , tmp->auteur) && !stricmp(debut->editeur , tmp->editeur) && (debut->ans_publication == tmp->ans_publication))
        pos = 1.0;
    else if((m == -1) && (n == 1)) pos = -2.0;
    else pos = -1.0;

    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);

}


void recherche_livre()
{  system("color 57");
    tmp = (info_livre*)malloc(sizeof(info_livre));
    fp = fopen(nomFile , "r+t");
    if(fp == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
        exit(1);
    }
    n = 0;
    while(!feof(fp))
    {
        n++;
        m = fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n", &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
        if(id == tmp->ID) break;
    }
    if(id == tmp->ID) pos = 1.0;
    else if((m == -1) && (n == 1)) pos = -2.0;
    else pos = -1.0;

    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);

}


void supprimer_livre()
{
    recherche_livre();
    if(pos == -2.0) printf("\nLa liste est vide !!!\n");
    else
    {
        printf("Donner ID de livre que vous souhaitez supprimer : ");
erreur_num7:
        fflush(stdin);
        n = scanf("%d", &id);
        if((n != 1) || (id <= 0))
        {
            printf("Voyez saisir une valeur correcte (>0) : ");
            goto erreur_num7;
        }
        recherche_livre();
        if (pos == -1.0) printf("Ce livre n'existe pas !!! \n");
        else
        {
            puts("Les informations du livre que vous voulez supprimer sont comme suit :\n");
            afficher_fpos();
            n = 1 ;
            printf("Voulez-vous suiver cette operation (O/N) : ");
erreur_alpha1:
            fflush(stdin);
            scanf(" %c", &c);
            if(toupper(c) != 'O' && toupper(c) != 'N')
            {
                printf("Voyez saisir une choix correcte (O/N) : ");
                goto erreur_alpha1;
            }
            else if(toupper(c) == 'O')
            {
                fp = fopen(nomFile , "r+t");
                fp_1 = fopen(nomFile_1 , "w+t");
                if(fp == NULL)
                {
                    printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
                    exit(1);
                }
                if(fp_1 == NULL)
                {
                    printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_1);
                    n = fclose(fp);
                    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
                    exit(1);
                }
                tmp = (info_livre*)malloc(sizeof(info_livre));
                while(!feof(fp))
                {
                    fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
                    if(id != tmp->ID) fprintf(fp_1 , "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n" , (tmp->ID) , (tmp->titre) , (tmp->auteur) , (tmp->editeur) , (tmp->ans_publication) ,  (tmp->qte) , (tmp->prix_jour) , (tmp->prix_semaine));
                }
                n = fclose(fp);
                if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
                n = fclose(fp_1);
                if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_1);
                remove(nomFile);
                n = rename(nomFile_1 , nomFile);
            }
            if(!n) printf("\nLa suppression des informations de livre de ID = %d s'effectue avec succee \n", id) ;
            else printf("\nLa suppression des informations de livre de ID = %d s'effectue avec echoue \n", id) ;
        }
    }
        printf("\nVoulez-vous supprimer une autre livre (O/N) ? ");
erreur_alpha2:
        fflush(stdin);
        scanf(" %c", &c);
        if(toupper(c) != 'O' && toupper(c) != 'N')
        {
            printf("Voyez saisir une choix correcte (O/N) : ");
            goto erreur_alpha2;
        }
        else if(toupper(c) == 'O') supprimer_livre();
}
int choose_item(char **items, char *title)
{
    int selected_option = 0;
    int key;

    // Compter le nombre d'options
    int item_count = 0;
    while (items[item_count] != NULL)
    {
        item_count++;
    }

    while (1)
    {
        // Effacer l'écran (spécifique à Windows)
        system("cls");

        // Afficher le titre
        printf(BOLD YELLOW "%s:\n" RESET, title);

        // Afficher les options avec surlignage
        for (int i = 0; i < item_count; i++)
        {
            if (i == selected_option)
            {
                // Si l'option sélectionnée est "Refuser", on l'affiche en rouge
                if (i == 1) {
                    printf(RED "> %s\n" RESET, items[i]); // Afficher en rouge
                } else {
                    printf(GREEN "> %s\n" RESET, items[i]); // Afficher en vert
                }
            }
            else
            {
                printf(WHITE "  %s\n" RESET, items[i]);
            }
        }

        // Récupérer la saisie de l'utilisateur
        key = _getch();
        if (key == 224) // Préfixe des touches fléchées
        {
            key = _getch();
            if (key == 72 && selected_option > 0) // Flèche du haut
            {
                selected_option--;
            }
            else if (key == 80 && selected_option < item_count - 1) // Flèche du bas
            {
                selected_option++;
            }
        }
        else if (key == 13) // Touche Enter
        {
            return selected_option;
        }
    }
}


void afficherEtAccepterTermesConditions()
{   system("color 57");
    char *options[] = {"Accepter", "Refuser"};
    int selected_option = 0;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    WORD originalAttrs;
    CONSOLE_SCREEN_BUFFER_INFO csbi;

    GetConsoleScreenBufferInfo(hConsole, &csbi);
    originalAttrs = csbi.wAttributes;

    while (1) {
        system("cls");
        gotoxy(46, 10);
        printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━|Termes et Conditions|━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ \n");
        gotoxy(51, 13);
        printf("1. Chaque étudiant peut emprunter jusqu'à 3 livres à la fois.\n");
        gotoxy(51, 14);
        printf("2. La durée maximale d'emprunt est de 60 jours.\n");
        gotoxy(51, 15);
        printf("3. Un retard dans la restitution entraînera une pénalité.\n");
        gotoxy(51, 16);
        printf("4. Les livres doivent être rendus en bon état.\n");
        gotoxy(51, 17);
        printf("5. En cas de perte ou de dégradation, le livre doit être remboursé.\n");
        gotoxy(51, 18);
        printf("6. Le non-respect des règles peut entraîner une suspension de prêt.\n");
        gotoxy(46, 23);
        printf("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");


        for (int i = 0; i < 2; i++) {
            if (i == selected_option) {
                if (i == 0) {
    // "Accepter" à gauche
    gotoxy(65, 21); // Position à gauche
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE);
} else {
    // "Refuser" à droite
    gotoxy(105, 21); // Position à droite
    SetConsoleTextAttribute(hConsole, FOREGROUND_RED| BACKGROUND_RED | BACKGROUND_BLUE);
}
            } else {
                // Default color
                if (i == 0) {
                    gotoxy(65, 21); // Position à gauche
                } else {
                    gotoxy(105, 21); // Position à droite
                }
                SetConsoleTextAttribute(hConsole, originalAttrs);
            }
            printf("%s\n", options[i]);
        }

        // Gestion des touches pressées
        int ch = _getch();
        if (ch == 224) { // Touche spéciale (flèches)
            ch = _getch();
            switch (ch) {
                case 75: // Flèche gauche
                    selected_option = 0; // Aller à "Accepter"
                    break;
                case 77: // Flèche droite
                    selected_option = 1; // Aller à "Refuser"
                    break;
            }
        } else if (ch == 13) { // Touche Entrée
            break;
        }

        SetConsoleTextAttribute(hConsole, originalAttrs);
    }

    system("cls");

    if (selected_option == 0) {
        login_sign_in1();
    } else {
        homepage();
    }
}
void statistique()
{
    int maxi = 0, mini = 100000, fois = 0, moins_fois = 10000, nbre_fois = 0 ;
    float maxi1 = 0.0, mini1 = 100000.0;


    fp = fopen(nomFile, "r+t");
    if (fp == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
        return;
    }
    tmp = (info_livre*) malloc (sizeof(info_livre));
    m = 0;
    while(fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine)) == 8)
    {
        if(tmp->qte) m += (tmp->qte);
        if(maxi < (tmp->ans_publication)) maxi = (tmp->ans_publication);
        if(mini > (tmp->ans_publication)) mini = (tmp->ans_publication);
        if(maxi1 < (tmp->prix_semaine)) maxi1 = (tmp->prix_semaine);
        if(mini1 > (tmp->prix_semaine)) mini1 = (tmp->prix_semaine);
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
    fp_1 = fopen(nomFile_2, "r+t");
    if (fp_1 == NULL) {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_2);
        return;
    }
    while (fgets(line , sizeof(line) , fp_1)) nbre_fois++;
    n = fclose(fp_1);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_2);

    system("cls");
    gotoxy(10,12);
    printf("╔═════════════════════════════════════════════════════════════════╣ Statistique ╠═════════════════════════════════════════════════════════════════╗\n");
    gotoxy(10,13);
    printf("║   La quatité des livres existe au sein de la Bibiothèque ENSAH est : %-9d ;                                                                ║\n", m);
    gotoxy(10,14);
    printf("║   Le nombre des utilisateurs de la Bibiothèque ENSAH sont : %-12d ;                                                                      ║\n", nbre_fois);
    gotoxy(10,15);
    printf("║   Le(s) plus anciénne(s) livre(s) à la bibliothèque ENSAH (est/sont) de l'année %5d ;                                                         ║\n", mini);
    gotoxy(10,16);
    printf("║   Le(s) plus nouveau(x) livre(s) à la bibliothèque ENSAH (est/sont) de l'année %5d ;                                                          ║\n", maxi);
    gotoxy(10,17);
    printf("║   Le(s) plus chér(s) emprunté(s) livre(s) par semaine à la bibliothèque ENSAH (est/sont) de prix : %-6.2fDH ;                                   ║\n", maxi1);
    gotoxy(10,18);
    printf("║   Le(s) moins chér(s) emprunté(s) livre(s) par semaine à la bibliothèque ENSAH (est/sont) de prix : %-6.2fDH .                                  ║\n", mini1);
    gotoxy(10,19);
    printf("╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n");
}
void espace_blocklist()
{
    gotoxy(60,12);
    puts("━━━━━━━━━━━━━━━━━━ESPACE LISTE NOIR━━━━━━━━━━━━━━━━━");
    gotoxy(60, 14);
    printf("*\t1          Ajouter a la liste-noir           *");
    gotoxy(60, 16);
    printf("---------------------------------------------------");
    gotoxy(60, 18);
    printf("*\t2        Supprimer sur la liste-noir         *");
    gotoxy(60, 20);
    printf("---------------------------------------------------");
    gotoxy(60, 22);
    printf("*\t0                Exit                        *");
    gotoxy(60, 24);
    puts("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    gotoxy(64, 26);
    printf("Veuillez entrer une meilleure choix (0-2):  ");
    gotoxy(64+strlen("Veuillez entrer une meilleure choix (0-2): "),26);
    scanf("%d", &choix);
}


void blocklist()
{
    system("cls");
    espace_blocklist();
    switch(choix)
    {
        case 0 :
            espace_administration();
            break;
        case 1 :
            ajouter_etudiant();
            break;
        case 2 :
            espace_supprimer_etudiant();
            break;
        default :
            puts("\nErreur!!! ");
            break;
    }
    getch();
    system("cls");

    if(choix) espace_blocklist();
    while(choix != 0);
    getch();
}


int recherche_etudiant_blocklist(user_blocklist *tmp)
{
    fp = fopen(nomFile_5 , "r+t");
    if(fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_5);
        exit(1);
    }
    while(fgets(line , sizeof(line) , fp))
    {
        if(strstr(line , (tmp->nom)) && strstr(line, (tmp->prenom)) && strstr(line , (tmp->CIN)) && strstr(line , (tmp->CNE)) && strstr(line , (tmp->email)) && strstr(line , (tmp->adresse)))
        {
            n = fclose(fp);
            if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
            return 1;
        }
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
    return 0;
}


int recherche_etudiant_user_blocklist(user *tmp)
{
    fp = fopen(nomFile_5 , "r+t");
    if(fp == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_5);
        exit(1);
    }
    m = 0;
    while (fgets(line, sizeof(line), fp))
    {
        if(strstr(line , (tmp->CIN)) && strstr(line , (tmp->CNE)))
        {
            m = 1;
            break;
        }
    }
    n = fclose(fp);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
    return m;
}


void supprimer_etudiant(user_blocklist *u3)
{
    fp_1 = fopen(nomFile_2 , "r+t");
    if(fp_1 == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_2);
        exit(1);
    }
    fp_2 = fopen(nomFile_1 , "a+t");
    if(fp_2 == NULL)
    {
        printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_1);
        n = fclose(fp_1);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_2);
        exit(1);
    }
    while(fgets(line , sizeof(line) , fp_1))
    {
        if(!strstr(line , (u3->nom)) || !strstr(line, (u3->prenom)) || !strstr(line , (u3->CIN)) || !strstr(line , (u3->CNE)) || !strstr(line , (u3->email)) || !strstr(line , (u3->adresse)))
            fputs(line , fp_2);
    }
    n = fclose(fp_1);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_2);
    n = fclose(fp_2);
    if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_1);
    remove(nomFile_2);
    n = rename(nomFile_1 , nomFile_2);
    if(!n) printf("L'étudiant(e) %s %s est bien ajouter à la liste-noire.", (u3->prenom), (u3->nom));
    else printf("Consulter vos informations!! L'étudiant(e) %s %s n'est pas ajouter à la liste-noire.", (u3->prenom), (u3->nom));
}
void supprimer_etudiant_blocklist(user_blocklist *tmp)
{
    if(!recherche_etudiant_blocklist(tmp)) printf("L'etudiant(e) %s %s n'existe pas dans la liste-noir .\n", tmp->prenom, tmp->nom);
    else
    {
        n = 1;
        puts("Les informations d'un(e) etudiant(e) que vous voulez supprimer sont comme suit :\n");
        afficher_informations_etudiant_blocklist(tmp);
        printf("Voulez-vous suiver cette operation (O/N) : ");
erreur_alpha7:
        fflush(stdin);
        scanf(" %c", &c);
        if(toupper(c) != 'O' && toupper(c) != 'N')
        {
            printf("Voyez saisir une choix correcte (O/N) : ");
            goto erreur_alpha7;
        }
        else if(toupper(c) == 'O')
        {
            fp = fopen(nomFile_5 , "r+t");
            fp_1 = fopen(nomFile_1 , "a+t");
            if(fp == NULL)
            {
                printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_5);
                exit(1);
            }
            if(fp_1 == NULL)
            {
                printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_1);
                n = fclose(fp);
                if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
                exit(1);
            }
            while(fgets(line , sizeof(line) , fp))
            {
                if(!strstr(line , (tmp->nom)) || !strstr(line, (tmp->prenom)) || !strstr(line , (tmp->CIN)) || !strstr(line , (tmp->CNE)) || !strstr(line , (tmp->email)) || !strstr(line , (tmp->adresse)))
                    fprintf(fp_1 ,"%s|%s|%s|%s|%s|%s\n", (tmp->nom), (tmp->prenom), (tmp->CIN), (tmp->CNE), (tmp->email), (tmp->adresse));
            }
            n = fclose(fp);
            if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
            n = fclose(fp_1);
            if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_1);
            remove(nomFile_5);
            n = rename(nomFile_1 , nomFile_5);
        }
        if(!n) printf("\nLa suppression d'etudiant(e) : %s %s, dont (il/elle) exist(e) dans la liste-noir s'effectue avec succee \n", tmp->prenom, tmp->nom) ;
        else printf("\nLa suppression d'etudiant(e) : %s %s, dont (il/elle) existe(e) dans la liste-noir s'effectue avec echoue \n", tmp->prenom, tmp->nom) ;
    }
}


void espace_supprimer_etudiant()
{
        puts("Donnez les informations d'etudiant(e) que vous-voulez supprimer : \n");
        u2 = (user_blocklist*) malloc (sizeof(user_blocklist));
        fflush(stdin);
        saiser_informations_etudiant_blocklist(&u2);
        supprimer_etudiant_blocklist(u2);
        Sleep(2000);
        blocklist();
}


void saiser_informations_etudiant_blocklist(user_blocklist **u)
{
    fflush(stdin);
    printf("Enter le nom    : ");
erreur_nom4:
    fflush(stdin);
    scanf("%[^\n]",&((*u)->nom));
    if(!isTextOnly((*u)->nom))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE et ESPACE\nVoyez saisir un NOM valide");
        goto erreur_nom4;
    }
    printf("Enter le prenom : ");
erreur_nom5:
    fflush(stdin);
    scanf("%[^\n]",&((*u)->prenom));
    if(!isTextOnly((*u)->prenom))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE et ESPACE\nVoyez saisir un PRENOM valide");
        goto erreur_nom5;
    }
    printf("Enter la CIN    : ");
erreur_print1:
    fflush(stdin);
    scanf("%s",&((*u)->CIN));
    if(!isTextPrint((*u)->CIN))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE\nVoyez saisir une CIN valide");
        goto erreur_print1;
    }
    printf("Enter la CNE    : ");
erreur_print2:
    fflush(stdin);
    scanf("%s",&((*u)->CNE));
    if(!isTextPrint((*u)->CNE))
    {
        printf("\n\t!!! N.B : Seul de CARACTERE, ESPACE et CHIFFRE\nVoyez saisir une CNE valide");
        goto erreur_print2;
    }
    printf("Enter le e-mail : "); fflush(stdin); scanf("%s",&((*u)->email));
    printf("Enter l'adresse : "); fflush(stdin); scanf("%[^\n]",&((*u)->adresse));
}


void afficher_informations_etudiant_blocklist(user_blocklist *tmp)
{
    printf("\n============== Details de l'Etudiant(e) ==============\n");
    printf("Nom         : %s\n", tmp->nom);
    printf("Prenom      : %s\n", tmp->prenom);
    printf("CIN         : %s\n", tmp->CIN);
    printf("CNE         : %s\n", tmp->CNE);
    printf("E-mail      : %s\n", tmp->email);
    printf("Adresse     : %s\n", tmp->adresse);
    printf("========================================================\n");
}

void ajouter_etudiant()
{
    u2 = (user_blocklist*) malloc (sizeof(user_blocklist));
    saiser_informations_etudiant_blocklist(&u2);
    if(recherche_etudiant_blocklist(u2)) printf("L'etudiant(e) %s %s est se mettre déjà dans la liste-noir .\n", u2->prenom, u2->nom);
    else
    {
        fp = fopen(nomFile_5 , "a+t");
        if(fp == NULL)
        {
            printf("\.\.\.\.\.\.\.\.\.\.Impossible d'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\n", nomFile_5);
            exit(1);
        }
        fprintf(fp ,"%s|%s|%s|%s|%s|%s\n", (u2->nom), (u2->prenom), (u2->CIN), (u2->CNE), (u2->email), (u2->adresse));
        n = fclose(fp);
        if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\. ", nomFile_5);
        supprimer_etudiant(u2);
    }
    printf("\n\n\nVoulez-vous ajouter un(e) autre etudiant(e) dans la liste-noir (O/N) ? ");
erreur_alpha6:
    fflush(stdin);
    scanf(" %c", &c);
    if(toupper(c) != 'O' && toupper(c) != 'N')
    {
        printf("Voyez saisir une choix correcte (O/N) : ");
        goto erreur_alpha6;
    }
    else if(toupper(c) == 'O')
    {
        system("cls");
        ajouter_etudiant();
    }
    system("cls");
    blocklist();
}

void modifier_livre()
{
    recherche_livre();
    if(pos == -2.0) printf("\nLa liste est vide !!!\n");
    else
    {
        printf("Donner ID de livre que vous souhaitez modifier ses informations : ");
erreur_num8:
        fflush(stdin);
        n = scanf("%d", &id);
        if((n != 1) || (id <= 0))
        {
            printf("Voyez saisir une valeur correcte (>0) : ");
            goto erreur_num8;
        }
        recherche_livre();
        if(pos == 1.0)
        {
            n = 1 ;
            fp = fopen(nomFile , "r+t");
            fp_1 = fopen(nomFile_1 , "w+t");
            if(fp == NULL)
            {
                printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile);
                exit(1);
            }
            if(fp_1 == NULL)
            {
                printf("\.\.\.\.\.\.\.\.\.\.Impossible d\'ouvrir le fichier %s\.\.\.\.\.\.\.\.\.\.\. \n", nomFile_1);
                n = fclose(fp);
                if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);
                exit(1);
            }

            tmp = (info_livre*)malloc(sizeof(info_livre));
            while(!feof(fp))
            {
                fscanf(fp , "%d|%[^|]|%[^|]|%[^|]|%d|%d|%f|%f\n" , &(tmp->ID) , &(tmp->titre) , &(tmp->auteur) , &(tmp->editeur) , &(tmp->ans_publication) , &(tmp->qte) , &(tmp->prix_jour) , &(tmp->prix_semaine));
                if(id != tmp->ID) fprintf(fp_1 , "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n" , (tmp->ID) , (tmp->titre) , (tmp->auteur) , (tmp->editeur) , (tmp->ans_publication) , (tmp->qte) , (tmp->prix_jour) , (tmp->prix_semaine));
                else
                {
                    puts("Les anciennes informations de ce livre sont comme suit : \n");
                    afficher_informations(*tmp);
                }
            }
            puts("Donner les nouveaux informations de ce livre : \n");
            tmp->ID = id;
            saiser_informations(&tmp);
            fprintf(fp_1 , "%d|%s|%s|%s|%d|%d|%.2f|%.2f\n" , (tmp->ID) , (tmp->titre) , (tmp->auteur) , (tmp->editeur) , (tmp->ans_publication) , (tmp->qte) , (tmp->prix_jour) , (tmp->prix_semaine));

            n = fclose(fp);
            if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile);

            n = fclose(fp_1);
            if(n) printf("\n\n\.\.\.\.\.\.\.\.\.\.Erreur de fermer le fichier %s\.\.\.\.\.\.\.\.\.\.\. ", nomFile_1);

            remove(nomFile);
            n = rename(nomFile_1 , nomFile);
            if(!n) printf("\nLa modification des informations de livre de ID = %d s'effectue avec succee \n", id) ;
            else printf("\nLa modification des informations de livre de ID = %d s'effectue avec echoue \n", id) ;
        }
        else printf("Ce livre n'existe pas !!! \n");
        printf("\nVoulez-vous modifier une autre livre (O/N) ? ");
erreur_alpha3:
        fflush(stdin);
        scanf(" %c", &c);
        if(toupper(c) != 'O' && toupper(c) != 'N')
        {
            printf("Voyez saisir une choix correcte (O/N) : ");
            goto erreur_alpha3;
        }
        else if(toupper(c) == 'O') modifier_livre();
    }
}


#endif // FUNCTION_H_INCLUDED

